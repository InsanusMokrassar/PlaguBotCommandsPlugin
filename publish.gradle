apply plugin: 'maven-publish'

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact javadocJar
            artifact sourcesJar

            pom {
                resolveStrategy = Closure.DELEGATE_FIRST

                description = "Plugin for centralized declaration and management of commands inside of plagubot system"
                name = "${project.name}"
                url = "https://github.com/InsanusMokrassar/PlaguBotCommandsPlugin"

                scm {
                    developerConnection = "scm:git:[fetch=]https://github.com/InsanusMokrassar/PlaguBotCommandsPlugin.git[push=]https://github.com/InsanusMokrassar/PlaguBotCommandsPlugin.git"
                    url = "https://github.com/InsanusMokrassar/PlaguBotCommandsPlugin.git"
                }

                developers {
                    
                        developer {
                            id = "InsanusMokrassar"
                            name = "Ovsiannikov Aleksei"
                            email = "ovsyannikov.alexey95@gmail.com"
                        }
                    
                }

                licenses {
                    
                        license {
                            name = "MIT License"
                            url = "https://opensource.org/licenses/MIT"
                        }
                    
                }
            }
            repositories {
                if ((project.hasProperty('GITHUBPACKAGES_USER') || System.getenv('GITHUBPACKAGES_USER') != null) && (project.hasProperty('GITHUBPACKAGES_PASSWORD') || System.getenv('GITHUBPACKAGES_PASSWORD') != null)) {
                    maven {
                        name = "GithubPackages"
                        url = uri("https://maven.pkg.github.com/InsanusMokrassar/PlaguBotCommandsPlugin")
                        credentials {
                            username = project.hasProperty('GITHUBPACKAGES_USER') ? project.property('GITHUBPACKAGES_USER') : System.getenv('GITHUBPACKAGES_USER')
                            password = project.hasProperty('GITHUBPACKAGES_PASSWORD') ? project.property('GITHUBPACKAGES_PASSWORD') : System.getenv('GITHUBPACKAGES_PASSWORD')
                        }
                    }
                }
                if ((project.hasProperty('SONATYPE_USER') || System.getenv('SONATYPE_USER') != null) && (project.hasProperty('SONATYPE_PASSWORD') || System.getenv('SONATYPE_PASSWORD') != null)) {
                    maven {
                        name = "sonatype"
                        url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                        credentials {
                            username = project.hasProperty('SONATYPE_USER') ? project.property('SONATYPE_USER') : System.getenv('SONATYPE_USER')
                            password = project.hasProperty('SONATYPE_PASSWORD') ? project.property('SONATYPE_PASSWORD') : System.getenv('SONATYPE_PASSWORD')
                        }
                    }
                }
            }
        }
    }
}

if (project.hasProperty("signing.gnupg.keyName")) {
    apply plugin: 'signing'
    
    signing {
        useGpgCmd()
    
        sign publishing.publications
    }
    
    task signAll {
        tasks.withType(Sign).forEach {
            dependsOn(it)
        }
    }
}
